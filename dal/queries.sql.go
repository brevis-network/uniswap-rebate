// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package dal

import (
	"context"

	"github.com/brevis-network/uniswap-rebate/binding"
	"github.com/lib/pq"
)

const monGet = `-- name: MonGet :one
SELECT key, blknum, blkidx FROM monitor WHERE key = $1
`

func (q *Queries) MonGet(ctx context.Context, key string) (Monitor, error) {
	row := q.db.QueryRowContext(ctx, monGet, key)
	var i Monitor
	err := row.Scan(&i.Key, &i.Blknum, &i.Blkidx)
	return i, err
}

const monSet = `-- name: MonSet :exec
INSERT INTO monitor (key, blknum, blkidx) VALUES ($1, $2, $3) ON CONFLICT (key) DO UPDATE
SET blknum = excluded.blknum, blkidx = excluded.blkidx
`

type MonSetParams struct {
	Key    string `json:"key"`
	Blknum uint64 `json:"blknum"`
	Blkidx int64  `json:"blkidx"`
}

func (q *Queries) MonSet(ctx context.Context, arg MonSetParams) error {
	_, err := q.db.ExecContext(ctx, monSet, arg.Key, arg.Blknum, arg.Blkidx)
	return err
}

const poolAdd = `-- name: PoolAdd :exec
INSERT INTO pools (poolid, poolkey) VALUES ($1, $2)
`

type PoolAddParams struct {
	Poolid  string          `json:"poolid"`
	Poolkey binding.PoolKey `json:"poolkey"`
}

func (q *Queries) PoolAdd(ctx context.Context, arg PoolAddParams) error {
	_, err := q.db.ExecContext(ctx, poolAdd, arg.Poolid, arg.Poolkey)
	return err
}

const poolGet = `-- name: PoolGet :one
SELECT poolkey FROM pools WHERE poolid = $1
`

func (q *Queries) PoolGet(ctx context.Context, poolid string) (binding.PoolKey, error) {
	row := q.db.QueryRowContext(ctx, poolGet, poolid)
	var poolkey binding.PoolKey
	err := row.Scan(&poolkey)
	return poolkey, err
}

const reqAdd = `-- name: ReqAdd :exec
INSERT INTO reqs (id, txs) VALUES ($1, $2)
`

type ReqAddParams struct {
	ID  int64    `json:"id"`
	Txs []string `json:"txs"`
}

func (q *Queries) ReqAdd(ctx context.Context, arg ReqAddParams) error {
	_, err := q.db.ExecContext(ctx, reqAdd, arg.ID, pq.Array(arg.Txs))
	return err
}
