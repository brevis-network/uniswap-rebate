// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: webapi.proto

package webapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UniRebate_NewProof_FullMethodName = "/UniRebate/NewProof"
	UniRebate_GetProof_FullMethodName = "/UniRebate/GetProof"
)

// UniRebateClient is the client API for UniRebate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniRebateClient interface {
	NewProof(ctx context.Context, in *NewProofReq, opts ...grpc.CallOption) (*NewProofResp, error)
	GetProof(ctx context.Context, in *GetProofReq, opts ...grpc.CallOption) (*GetProofResp, error)
}

type uniRebateClient struct {
	cc grpc.ClientConnInterface
}

func NewUniRebateClient(cc grpc.ClientConnInterface) UniRebateClient {
	return &uniRebateClient{cc}
}

func (c *uniRebateClient) NewProof(ctx context.Context, in *NewProofReq, opts ...grpc.CallOption) (*NewProofResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewProofResp)
	err := c.cc.Invoke(ctx, UniRebate_NewProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniRebateClient) GetProof(ctx context.Context, in *GetProofReq, opts ...grpc.CallOption) (*GetProofResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofResp)
	err := c.cc.Invoke(ctx, UniRebate_GetProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniRebateServer is the server API for UniRebate service.
// All implementations should embed UnimplementedUniRebateServer
// for forward compatibility.
type UniRebateServer interface {
	NewProof(context.Context, *NewProofReq) (*NewProofResp, error)
	GetProof(context.Context, *GetProofReq) (*GetProofResp, error)
}

// UnimplementedUniRebateServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUniRebateServer struct{}

func (UnimplementedUniRebateServer) NewProof(context.Context, *NewProofReq) (*NewProofResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProof not implemented")
}
func (UnimplementedUniRebateServer) GetProof(context.Context, *GetProofReq) (*GetProofResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedUniRebateServer) testEmbeddedByValue() {}

// UnsafeUniRebateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniRebateServer will
// result in compilation errors.
type UnsafeUniRebateServer interface {
	mustEmbedUnimplementedUniRebateServer()
}

func RegisterUniRebateServer(s grpc.ServiceRegistrar, srv UniRebateServer) {
	// If the following call pancis, it indicates UnimplementedUniRebateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UniRebate_ServiceDesc, srv)
}

func _UniRebate_NewProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniRebateServer).NewProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniRebate_NewProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniRebateServer).NewProof(ctx, req.(*NewProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniRebate_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniRebateServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniRebate_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniRebateServer).GetProof(ctx, req.(*GetProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UniRebate_ServiceDesc is the grpc.ServiceDesc for UniRebate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniRebate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UniRebate",
	HandlerType: (*UniRebateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewProof",
			Handler:    _UniRebate_NewProof_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _UniRebate_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webapi.proto",
}
